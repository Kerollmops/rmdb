name: Rust CI

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # RUSTFLAGS: "-D warnings"
  # RUSTDOCFLAGS: "-D warnings"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - nightly

    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@nightly
      - uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.rust }}
          command: build
      - uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.rust }}
          command: test
          args: --all-features
      - uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.rust }}
          command: test

  old_tests:
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        bins: [mtest, mtest2, mtest3, mtest4, mtest5]
        rust:
          - nightly

    steps:
      - uses: actions/checkout@v2
      - uses: dtolnay/rust-toolchain@nightly
      - uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.rust }}
          command: build
      - name: Clean and create testdb directory
        run: |
          rm -rf testdb
          mkdir testdb
      - uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ matrix.rust }}
          command: run
          args: --bin ${{ matrix.bins }}

  clippy:
      name: Ensure clippy is happy
      runs-on: ${{ matrix.rust }}
      continue-on-error: true
      steps:
        - uses: actions/checkout@v2
        - uses: dtolnay/rust-toolchain@nightly
          with:
            components: clippy
        - uses: actions-rs/cargo@v1
          with:
            toolchain: ${{ matrix.rust }}
            command: clippy
            args: --all-targets -- --deny warnings

  fmt:
      name: Ensure the project is formatted
      runs-on: macos-latest # We will need to use matrix.rust, here.
      steps:
        - uses: actions/checkout@v2
        - uses: dtolnay/rust-toolchain@nightly
          with:
            components: rustfmt
        - uses: actions-rs/cargo@v1
          with:
            toolchain: ${{ matrix.rust }}
            command: fmt
            args: --check
